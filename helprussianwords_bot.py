import logging

from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Updater, MessageHandler, Filters, CommandHandler
from random import randint
import wikipedia, re, requests
from pymorphy2 import MorphAnalyzer

gram = {'POST': '—á–∞—Å—Ç—å —Ä–µ—á–∏', 'NOUN': '–∏–º—è —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ', 'ADJF': '–∏–º—è –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω–æ–µ (–ø–æ–ª–Ω–æ–µ)',
        'ADJS': '–∏–º—è –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω–æ–µ (–∫—Ä–∞—Ç–∫–æ–µ)', 'COMP': '–∫–æ–º–ø–∞—Ä–∞—Ç–∏–≤', 'VERB': '–≥–ª–∞–≥–æ–ª (–ª–∏—á–Ω–∞—è —Ñ–æ—Ä–º–∞)',
        'INFN': '–≥–ª–∞–≥–æ–ª (–∏–Ω—Ñ–∏–Ω–∏—Ç–∏–≤)', 'PRTF': '–ø—Ä–∏—á–∞—Å—Ç–∏–µ (–ø–æ–ª–Ω–æ–µ)', 'PRTS': '–ø—Ä–∏—á–∞—Å—Ç–∏–µ (–∫—Ä–∞—Ç–∫–æ–µ)',
        'GRND': '–¥–µ–µ–ø—Ä–∏—á–∞—Å—Ç–∏–µ', 'NUMR': '—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–æ–µ', 'ADVB': '–Ω–∞—Ä–µ—á–∏–µ', 'NPRO': '–º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ-—Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ',
        'PRED': '–ø—Ä–µ–¥–∏–∫–∞—Ç–∏–≤', 'PREP': '–ø—Ä–µ–¥–ª–æ–≥', 'CONJ': '—Å–æ—é–∑', 'PRCL': '—á–∞—Å—Ç–∏—Ü–∞', 'INTJ': '–º–µ–∂–¥–æ–º–µ—Ç–∏–µ',
        'LATN': '—Å–ª–æ–≤–æ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö –±—É–∫–≤', 'PNCT': '–ø—É–Ω–∫—Ç—É–∞—Ü–∏—è', 'NUMB': '—á–∏—Å–ª–æ', 'intg': '—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ',
        'real': '–≤–µ—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ', 'ROMN': '—Ä–∏–º—Å–∫–æ–µ —á–∏—Å–ª–æ', 'UNKN': '—Å–ª–æ–≤–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å',
        'ANim': '–∫–∞—Ç–µ–≥–æ—Ä–∏—è –æ–¥—É—à–µ–≤–ª—ë–Ω–Ω–æ—Å—Ç–∏', 'anim': '–æ–¥—É—à–µ–≤–ª—ë–Ω–Ω–æ–µ', 'inan': '–Ω–µ–æ–¥—É—à–µ–≤–ª—ë–Ω–Ω–æ–µ',
        'GNdr': '—Ä–æ–¥ / —Ä–æ–¥ –Ω–µ –≤—ã—Ä–∞–∂–µ–Ω', 'masc': '–º—É–∂—Å–∫–æ–π —Ä–æ–¥', 'femn': '–∂–µ–Ω—Å–∫–∏–π —Ä–æ–¥', 'neut': '—Å—Ä–µ–¥–Ω–∏–π —Ä–æ–¥',
        'ms-f': '–æ–±—â–∏–π —Ä–æ–¥ (–º/–∂)', 'NMbr': '—á–∏—Å–ª–æ', 'sing': '–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ', 'plur': '–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ',
        'Sgtm': 'singularia tantum', 'Pltm': 'pluralia tantum', 'Fixd': '–Ω–µ–∏–∑–º–µ–Ω—è–µ–º–æ–µ', 'CAse': '–∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø–∞–¥–µ–∂–∞',
        'nomn': '–∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂', 'gent': '—Ä–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂', 'datv': '–¥–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂',
        'accs': '–≤–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂', 'ablt': '—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂', 'loct': '–ø—Ä–µ–¥–ª–æ–∂–Ω—ã–π –ø–∞–¥–µ–∂',
        'voct': '–∑–≤–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂', 'gen1': '–ø–µ—Ä–≤—ã–π —Ä–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂',
        'gen2': '–≤—Ç–æ—Ä–æ–π —Ä–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π (—á–∞—Å—Ç–∏—á–Ω—ã–π) –ø–∞–¥–µ–∂', 'acc2': '–≤—Ç–æ—Ä–æ–π –≤–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂',
        'loc1': '–ø–µ—Ä–≤—ã–π –ø—Ä–µ–¥–ª–æ–∂–Ω—ã–π –ø–∞–¥–µ–∂', 'loc2': '–≤—Ç–æ—Ä–æ–π –ø—Ä–µ–¥–ª–æ–∂–Ω—ã–π (–º–µ—Å—Ç–Ω—ã–π) –ø–∞–¥–µ–∂', 'Abbr': '–∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–∞',
        'Name': '–∏–º—è', 'Surn': '—Ñ–∞–º–∏–ª–∏—è', 'Patr': '–æ—Ç—á–µ—Å—Ç–≤–æ', 'Geox': '—Ç–æ–ø–æ–Ω–∏–º', 'Orgn': '–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è',
        'Trad': '—Ç–æ—Ä–≥–æ–≤–∞—è –º–∞—Ä–∫–∞', 'Subx': '–≤–æ–∑–º–æ–∂–Ω–∞ —Å—É–±—Å—Ç–∞–Ω—Ç–∏–≤–∞—Ü–∏—è', 'Supr': '–ø—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–∞—è —Å—Ç–µ–ø–µ–Ω—å',
        'Qual': '–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ', 'Apro': '–º–µ—Å—Ç–æ–∏–º–µ–Ω–Ω–æ–µ', 'Anum': '–ø–æ—Ä—è–¥–∫–æ–≤–æ–µ', 'Poss': '–ø—Ä–∏—Ç—è–∂–∞—Ç–µ–ª—å–Ω–æ–µ',
        'V-ey': '—Ñ–æ—Ä–º–∞ –Ω–∞ -–µ—é', 'V-oy': '—Ñ–æ—Ä–º–∞ –Ω–∞ -–æ—é', 'Cmp2': '—Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–µ–ø–µ–Ω—å –Ω–∞ –ø–æ-',
        'V-ej': '—Ñ–æ—Ä–º–∞ –∫–æ–º–ø–∞—Ä–∞—Ç–∏–≤–∞ –Ω–∞ -–µ–π', 'ASpc': '–∫–∞—Ç–µ–≥–æ—Ä–∏—è –≤–∏–¥–∞', 'perf': '—Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã–π –≤–∏–¥',
        'impf': '–Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã–π –≤–∏–¥', 'TRns': '–∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø–µ—Ä–µ—Ö–æ–¥–Ω–æ—Å—Ç–∏', 'tran': '–ø–µ—Ä–µ—Ö–æ–¥–Ω—ã–π',
        'intr': '–Ω–µ–ø–µ—Ä–µ—Ö–æ–¥–Ω—ã–π', 'Impe': '–±–µ–∑–ª–∏—á–Ω—ã–π', 'Impx': '–≤–æ–∑–º–æ–∂–Ω–æ –±–µ–∑–ª–∏—á–Ω–æ–µ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ',
        'Mult': '–º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω—ã–π', 'Refl': '–≤–æ–∑–≤—Ä–∞—Ç–Ω—ã–π', 'PErs': '–∫–∞—Ç–µ–≥–æ—Ä–∏—è –ª–∏—Ü–∞', '1per': '1 –ª–∏—Ü–æ', '2per': '2 –ª–∏—Ü–æ',
        '3per': '3 –ª–∏—Ü–æ', 'TEns': '–∫–∞—Ç–µ–≥–æ—Ä–∏—è –≤—Ä–µ–º–µ–Ω–∏', 'pres': '–Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è', 'past': '–ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è',
        'futr': '–±—É–¥—É—â–µ–µ –≤—Ä–µ–º—è', 'MOod': '–∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–∞–∫–ª–æ–Ω–µ–Ω–∏—è', 'indc': '–∏–∑—ä—è–≤–∏—Ç–µ–ª—å–Ω–æ–µ –Ω–∞–∫–ª–æ–Ω–µ–Ω–∏–µ',
        'impr': '–ø–æ–≤–µ–ª–∏—Ç–µ–ª—å–Ω–æ–µ –Ω–∞–∫–ª–æ–Ω–µ–Ω–∏–µ', 'INvl': '–∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–≤–º–µ—Å—Ç–Ω–æ—Å—Ç–∏',
        'incl': '–≥–æ–≤–æ—Ä—è—â–∏–π –≤–∫–ª—é—á—ë–Ω –≤ –¥–µ–π—Å—Ç–≤–∏–µ', 'excl': '–≥–æ–≤–æ—Ä—è—â–∏–π –Ω–µ –≤–∫–ª—é—á—ë–Ω –≤ –¥–µ–π—Å—Ç–≤–∏–µ',
        'VOic': '–∫–∞—Ç–µ–≥–æ—Ä–∏—è –∑–∞–ª–æ–≥–∞', 'actv': '–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ª–æ–≥', 'pssv': '—Å—Ç—Ä–∞–¥–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞–ª–æ–≥',
        'Infr': '—Ä–∞–∑–≥–æ–≤–æ—Ä–Ω–æ–µ', 'Slng': '–∂–∞—Ä–≥–æ–Ω–Ω–æ–µ', 'Arch': '—É—Å—Ç–∞—Ä–µ–≤—à–µ–µ', 'Litr': '–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç',
        'Erro': '–æ–ø–µ—á–∞—Ç–∫–∞', 'Dist': '–∏—Å–∫–∞–∂–µ–Ω–∏–µ', 'Ques': '–≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ', 'Dmns': '—É–∫–∞–∑–∞—Ç–µ–ª—å–Ω–æ–µ',
        'Prnt': '–≤–≤–æ–¥–Ω–æ–µ —Å–ª–æ–≤–æ', 'V-be': '—Ñ–æ—Ä–º–∞ –Ω–∞ -—å–µ', 'V-en': '—Ñ–æ—Ä–º–∞ –Ω–∞ -–µ–Ω–µ–Ω',
        'V-ie': '—Ñ–æ—Ä–º–∞ –Ω–∞ -–∏- –∏–ª–∏ –æ—Ç—á–µ—Å—Ç–≤–æ —Å -–∏–µ', 'V-bi': '—Ñ–æ—Ä–º–∞ –Ω–∞ -—å–∏',
        'Fimp': '–¥–µ–µ–ø—Ä–∏—á–∞—Å—Ç–∏–µ –æ—Ç –≥–ª–∞–≥–æ–ª–∞ –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–∞', 'Prdx': '–º–æ–∂–µ—Ç –≤—ã—Å—Ç—É–ø–∞—Ç—å –≤ —Ä–æ–ª–∏ –ø—Ä–µ–¥–∏–∫–∞—Ç–∏–≤–∞',
        'Coun': '—Å—á—ë—Ç–Ω–∞—è —Ñ–æ—Ä–º–∞', 'Coll': '—Å–æ–±–∏—Ä–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–æ–µ', 'V-sh': '–¥–µ–µ–ø—Ä–∏—á–∞—Å—Ç–∏–µ –Ω–∞ -—à–∏',
        'Af-p': '—Ñ–æ—Ä–º–∞ –ø–æ—Å–ª–µ –ø—Ä–µ–¥–ª–æ–≥–∞', 'Inmx': '–º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –æ–¥—É—à. / –Ω–µ–æ–¥—É—à.',
        'Vpre': '–í–∞—Ä–∏–∞–Ω—Ç –ø—Ä–µ–¥–ª–æ–≥–∞', 'Anph': '–ê–Ω–∞—Ñ–æ—Ä–∏—á–µ—Å–∫–æ–µ (–º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ)', 'Init': '–ò–Ω–∏—Ü–∏–∞–ª',
        'Adjx': '–º–æ–∂–µ—Ç –≤—ã—Å—Ç—É–ø–∞—Ç—å –≤ —Ä–æ–ª–∏ –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω–æ–≥–æ', 'Ms-f': '–∫–æ–ª–µ–±–∞–Ω–∏–µ –ø–æ —Ä–æ–¥—É (–º/–∂/—Å)',
        'Hypo': '–≥–∏–ø–æ—Ç–µ—Ç–∏—á–µ—Å–∫–∞—è —Ñ–æ—Ä–º–∞ —Å–ª–æ–≤–∞'}
gram_list = gram.keys()

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.DEBUG
)
logger = logging.getLogger(__name__)

TOKEN = '5311202148:AAH6UJzLDJSseeAUepW9lJXgO7dLdAm1aXg'

wikipedia.set_lang("ru")

reply_keyboard_start = [['/start']]
markup = ReplyKeyboardMarkup(reply_keyboard_start, one_time_keyboard=False)

reply_keyboard_comm = [['/commands'], ['/new_word']]
markup_comm = ReplyKeyboardMarkup(reply_keyboard_comm, one_time_keyboard=False)

reply_keyboard_act = [['/check', '/meaning', '/morfem'], ['/fon', '/morfol', '/end']]
markup_act = ReplyKeyboardMarkup(reply_keyboard_act, one_time_keyboard=False)

word = ''


def getwiki(s):
    try:
        ny = wikipedia.page(s)
        wikitext = ny.content[:1000]
        wikimas = wikitext.split('.')
        wikimas = wikimas[:-1]
        wikitext2 = ''
        for x in wikimas:
            if not ('==' in x):
                if len((x.strip())) > 3:
                   wikitext2 = wikitext2 + x + '.'
            else:
                break
        wikitext2 = re.sub('\([^()]*\)', '', wikitext2)
        wikitext2 = re.sub('\([^()]*\)', '', wikitext2)
        wikitext2 = re.sub('\{[^\{\}]*\}', '', wikitext2)
        wikitext2 = re.sub('  ', ' ', wikitext2)
        return wikitext2
    except Exception:
        txts = ['–Ø –Ω–µ –Ω–∞—à–µ–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–≤–µ–¥–µ–Ω–Ω–æ–º —Å–ª–æ–≤–µ. –ú–æ–∂–µ—Ç, –≥–¥–µ-—Ç–æ –≤ —Å–ª–æ–≤–µ –∑–∞—Ç–∞–∏–ª–∞—Å—å –∫–æ–≤–∞—Ä–Ω–∞—è –æ—à–∏–±–∫–∞? ü§î',
                '–í —ç–Ω—Ü–∏–∫–ª–æ–ø–µ–¥–∏–∏ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç—Ç–æ–º üò©',
                '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ç–æ–º —Å–ª–æ–≤–µ ‚òπ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞']
        return txts[randint(0, 2)]


def start(update, context):
    update.message.reply_text("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! üôå –Ø —è–∑—ã–∫–æ–≤–æ–π –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫. –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –Ω–∞–ø–∏—à–∏—Ç–µ /commands.\n"
                              "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /help.", reply_markup=markup_comm)


def help(update, context):
    update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –≤–∞–º —Å–ª–æ–≤–æ, –∞ –¥–∞–ª—å—à–µ –≤—ã–±–∏—Ä–∞–π—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ."
                              " –ë–æ—Ç –≤—ã–¥–∞—Å—Ç –≤–∞–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.")


def commands(update, context):
    update.message.reply_text("–í–æ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≥–æ, —á—Ç–æ —è —É–º–µ—é üòä:\n/new_word - –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –Ω–æ–≤—ã–º —Å–ª–æ–≤–æ–º;\n"
                              "/check - –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Å–ª–æ–≤–∞;\n/meaning - –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ª–æ–≤–∞;\n"
                              "/morfem - –º–æ—Ä—Ñ–µ–º–Ω—ã–π —Ä–∞–∑–±–æ—Ä —Å–ª–æ–≤–∞;\n/fon - —Ñ–æ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–æ—Ä —Å–ª–æ–≤–∞;\n"
                              "/morfol - –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–æ—Ä —Å–ª–æ–≤–∞;\n/end - –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.",
                              reply_markup=markup_comm)


def begin(update, context):
    update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ:")


def vars(update, context):
    global word
    word = update.message.text
    update.message.reply_text(f'–í–∞—à–µ —Å–ª–æ–≤–æ: {word}\n–ß–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å? üòä', reply_markup=markup_act)


def check(update, context):
    global word
    if MorphAnalyzer().word_is_known(word):
        txts = ['–í—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–ø–∏—Å–∞–ª–∏ —Å–ª–æ–≤–æ! üëç', '–¢–∞–∫–æ–µ —Å–ª–æ–≤–æ –Ω–∞—à–ª–æ—Å—å –≤ –º–æ–µ–º —Å–ª–æ–≤–∞—Ä–µ. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å, –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! ü§î',
                '–ü–æ–ª–∞–≥–∞—é, –≤–∞—à–µ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏ –Ω–µ—Ç –ø—Ä–µ–¥–µ–ª–∞! üôÉ']
        txt = txts[randint(0, 2)]
    else:
        txts = ['–í—Ä—è–¥ –ª–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –≤–∞–º–∏ —Å–ª–æ–≤–æ –≤–µ—Ä–Ω–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∞–ø–∏—Å–∞–Ω–∏—èüòâ',
                '–ü–æ–∂–∞–ª—É–π, –≤–∞–º —Å—Ç–æ–∏—Ç –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–∞–ø–∏—Å–∞—Ç—å —Å–ª–æ–≤–æ –ø–æ-–¥—Ä—É–≥–æ–º—Éü§î', '–°–ª–æ–≤–∞, –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –≤–∞–º–∏, –≤ —Å–ª–æ–≤–∞—Ä–µ –Ω–µ—Ç—Éüò©']
        txt = txts[randint(0, 2)]
    update.message.reply_text(txt, reply_markup=markup_act)


def meaning(update, context):
    global word
    update.message.reply_text(getwiki(word), reply_markup=markup_act)


def morfem(update, context):
    update.message.reply_text(
        "...",
        reply_markup=markup_act
    )


def fon(update, context):
    global word
    try:
        txt = f'–õ–æ–≤–∏ —Ñ–æ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–æ—Ä —Å–ª–æ–≤–∞ {word}: ' + requests.get(f"https://frazbor.ru/{word}").content.\
            decode("utf-8").split('\n')[63].split('<span class="transcription">')[1].split('</span>')[0]
    except Exception:
        txts = ['–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å —Ñ–æ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–æ—Ä —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ üôÅ',
                '–í–æ—Ç –Ω–µ–∑–∞–¥–∞—á–∞! –ù–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –≤ –º–æ–µ–º –∫–∞—Ä–º–∞–Ω–Ω–æ–º —Å–ª–æ–≤–∞—Ä–∏–∫–µ —Å–ª–æ–≤–∞ üòû',
                '–ú–Ω–µ –æ—á–µ–Ω—å –∂–∞–ª—å, –Ω–æ —è –Ω–µ –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å —Ñ–æ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–æ—Ä –¥–∞–Ω–Ω–æ–≥–æ –≤–∞–º–∏ —Å–ª–æ–≤–∞ üôÅ']
        txt = txts[randint(0, 2)]
    update.message.reply_text(txt, reply_markup=markup_act)


def morfol(update, context):
    global word
    txt_list = []
    morph = MorphAnalyzer().parse(word)
    for i in range(len(morph)):
        txt = []
        tags = morph[i].tag
        for key in gram_list:
            if key in tags:
                txt.append(gram[key])
        txt_list.append(f'{str(i + 1)}. –ù.—Ñ.: {morph[i].normal_form}; ' + ', '.join(txt))
    if MorphAnalyzer().word_is_known(word):
        txt = f'üòâ –õ–æ–≤–∏ –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–±–æ—Ä–∞ —Å–ª–æ–≤–∞ {word}:\n' + '\n'.join(txt_list)
    else:
        txts = ['–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–æ—Ä —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ üôÅ',
                '–í–æ—Ç –Ω–µ–∑–∞–¥–∞—á–∞! –Ø –Ω–µ –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–æ—Ä –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–ª–æ–≤–∞ üòû',
                '–ú–Ω–µ –æ—á–µ–Ω—å –∂–∞–ª—å, –Ω–æ —è –Ω–µ –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–æ—Ä –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞ üôÅ']
        txt = txts[randint(0, 2)]
    update.message.reply_text(txt, reply_markup=markup_act)


def end(update, context):
    update.message.reply_text("–†–∞–¥ –±—ã–ª –ø–æ–º–æ—á—å! üòä", reply_markup=markup_comm)


def main():
    updater = Updater(TOKEN)
    dp = updater.dispatcher

    text_handler = MessageHandler(Filters.text & ~Filters.command, vars)
    dp.add_handler(text_handler)

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("help", help))
    dp.add_handler(CommandHandler("commands", commands))
    dp.add_handler(CommandHandler("new_word", begin))
    dp.add_handler(CommandHandler("check", check))
    dp.add_handler(CommandHandler("morfem", morfem))
    dp.add_handler(CommandHandler("meaning", meaning))
    dp.add_handler(CommandHandler("fon", fon))
    dp.add_handler(CommandHandler("morfol", morfol))
    dp.add_handler(CommandHandler("end", end))

    updater.start_polling()


if __name__ == '__main__':
    main()